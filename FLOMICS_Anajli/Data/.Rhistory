if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("TitanCNA")
library(TitanCNA)
options(stringsAsFactors=F)
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table",
"plyr", "ggpubr",
"ggrepel", "stringr", "maftools", "magrittr", "ggExtra", "cowplot")
lapply(packages, require, character.only = TRUE)
date = Sys.Date()
infile <- system.file("extdata", "test_alleleCounts_chr2.txt",
+ package = "TitanCNA")
infile <- system.file("extdata", "test_alleleCounts_chr2.txt",
package = "TitanCNA")
infile <- system.file("extdata", "test_alleleCounts_chr2.txt",
package = "TitanCNA")
data <- loadAlleleCounts(infile, genomeStyle = "NCBI")
names(data)
head(data)
tumWig <- system.file("extdata", "test_tum_chr2.wig", package = "TitanCNA")
normWig <- system.file("extdata", "test_norm_chr2.wig", package = "TitanCNA")
gc <- system.file("extdata", "gc_chr2.wig", package = "TitanCNA")
map <- system.file("extdata", "map_chr2.wig", package = "TitanCNA")
cnData <- correctReadDepth(tumWig, normWig, gc, map, genomeStyle = "NCBI")
head(cnData)
head(v)
head(tumWig)
tumWig
head(cncnData)
head(cnData)
head(data)
options(stringsAsFactors=F)
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table",
"plyr", "ggpubr",
"ggrepel", "stringr", "maftools", "magrittr", "ggExtra", "cowplot")
lapply(packages, require, character.only = TRUE)
date = Sys.Date()
#figure 2
res = readRDS("Documents/final_candidates_TCGA_PCAWG_results_100CVsofElasticNet_June15.rds")
res
res = as.data.table(filter(res, data=="TCGA"))
canc_conv = readRDS("canc_conv.rds")
colnames(canc_conv)[2] = "cancer"
z=which(res$gene_name == "HOXA-AS4")
res$gene_name[z] = "HOXA10-AS"
#figure 2
res = readRDS("Documents/final_candidates_TCGA_PCAWG_results_100CVsofElasticNet_June15.rds")
res = as.data.table(filter(res, data=="TCGA"))
canc_conv = readRDS("canc_conv.rds")
options(stringsAsFactors=F)
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table",
"plyr", "ggpubr",
"ggrepel", "stringr", "maftools", "magrittr", "ggExtra", "cowplot")
lapply(packages, require, character.only = TRUE)
date = Sys.Date()
#figure 2
res = readRDS("Documents/final_candidates_TCGA_PCAWG_results_100CVsofElasticNet_June15.rds")
res = as.data.table(filter(res, data=="TCGA"))
canc_conv = readRDS("Documents/canc_conv.rds")
colnames(canc_conv)[2] = "cancer"
z=which(res$gene_name == "HOXA-AS4")
res$gene_name[z] = "HOXA10-AS"
res
res = merge(res, canc_conv, by="cancer")
t = as.data.table(table(res$type))
t = t[order(-N)]
res$type = factor(res$type, levels =t$V1)
res = res[order(type, HR)]
res
#need to order genes wtihin cancer type
res$combo = paste(res$gene_name, res$type)
res = res[order(type, HR)]
order = unique(res$gene_name)
res$gene_name = factor(res$gene_name, levels=order)
res
require(devtools)
devtools::install_github("keyuan/ccube")
---
title: "Ccube: Clustering Cancer Cell Fractions"
author: "Ke Yuan"
date: "`r Sys.Date()`"
output:
html_document:
theme: null
css: wch_style.css
toc: true
vignette: >
%\VignetteIndexEntry{Vignette Title}
%\VignetteEngine{knitr::rmarkdown}
\usepackage[utf8]{inputenc}
---
library(ccube)
#> Loading required package: foreach
library(dplyr)
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
#library(doParallel)
options(stringsAsFactors = F)
set.seed(1234)
numSnv <- 500
ccfSet <- c(1, 0.7, 0.3) # true ccf pool
ccfTrue <- sample(ccfSet, numSnv, c(0.5,0.2,0.3), replace = T) # simulate true clusters
purity <- 0.8
cnPoolMaj <- c(1,2,3,4) # a pool of possible major copy numbers
cnPoolMin <- c(0,1,2) # a pool of possible minor copy numbers
cnPoolMajFractions <- c(1/4, 1/4, 1/4, 1/4) # prevalence of possible major copy numbers
cnPoolMinFractions <- c(1/3, 1/3, 1/3) # prevalence of possible minor copy numbers
cnProfile = GenerateCopyNumberProfile(cnPoolMaj, cnPoolMin,
cnPoolMajFractions, cnPoolMinFractions, numSnv)
cnProfile
baseDepth = 40
mydata <- data.frame(mutation_id = paste0("ss","_", seq_len(numSnv)) ,
ccf_true = ccfTrue,
minor_cn = cnProfile[,1],
major_cn = cnProfile[,2],
total_cn = cnProfile[,3],
purity = purity,
normal_cn = 2)
mydata <- dplyr::mutate(rowwise(mydata),
mult_true = sample(seq(1,if (major_cn ==1) { 1 } else {major_cn}), 1), # simulate multiplicity
vaf_true = cp2ap(ccf_true, purity, normal_cn, total_cn, total_cn, mult_true), # simulate vaf
total_counts = rpois(1, total_cn/2 * baseDepth), # simulate total read counts
var_counts = rbinom(1, total_counts, vaf_true),  # simulate variant read counts
ref_counts = total_counts - var_counts)
head(mydata)
#> Source: local data frame [6 x 12]
View(mydata)
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
results$ssm
ssm = results$ssm
View(ssm)
View(mydata)
mydata$ccf_true = NULL
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
?RunCcubePipeline
mydat
mydata
mydata
View(mydata)
mydata_test = mydata
mydata_test$purity = NULL
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
mydata
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata_test,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
View(mydata_test)
View(mydata_test)
?GetPurity
mydata_test$mult_true= NULL
mydata_test$vaf_true = NULL
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata_test,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
library(devtools)
install_github("hanasusak/cDriver")
library(cDriver)
library(maftools)
var.annovar <- system.file("extdata", "variants.hg19_multianno.txt", package = "maftools")
var.annovar.maf <- annovarToMaf(annovar = var.annovar, Center = 'CSI-NUS', refBuild = 'hg19',
tsbCol = 'Tumor_Sample_Barcode', table = 'ensGene', header = TRUE)
var.annovar <- system.file("extdata", "variants.hg19_multianno.txt", package = "maftools")
var.annovar
var.annovar.maf <- annovarToMaf(annovar = var.annovar, Center = 'CSI-NUS', refBuild = 'hg19',
tsbCol = 'Tumor_Sample_Barcode', table = 'ensGene', header = TRUE)
var.annovar.maf <- annovarToMaf(annovar = var.annovar, Center = 'CSI-NUS', refBuild = 'hg19',
tsbCol = 'Tumor_Sample_Barcode', table = 'ensGene')
date = Sys.Date()
options(stringsAsFactors=F)
setwd("~/Documents/RAP_analysis")
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table",
"plyr", "ggpubr",
"ggrepel", "stringr", "maftools", "magrittr", "ggExtra", "broom", "EnvStats", "ggthemes")
lapply(packages, require, character.only = TRUE)
library(RColorBrewer)
library(openxlsx)
library(plotly)
display.brewer.all()
display.brewer.pal(9, "Set1")
#1. Summary SNV data
muts = fread("2019-11-27_READ_ONLY_ALL_MERGED_MUTS.txt")
morin = read.xlsx("supp_blood-2013-02-483727_TableS3.xlsx")
#total mutations
sum_muts = as.data.table(table(muts$id)) ; sum_muts = sum_muts[order(-N)]
print(sum_muts)
ggbarplot(sum_muts, x = "V1", y="N", fill="grey") +theme_bw() +
rotate_x_text(65) + ylab("Number of SNVs") + xlab("Sample")
ggsave(paste(date, "num_muts_per_samples_final.pdf", sep="_"))
#how many founder mutatiotns
founds = filter(as.data.table(table(muts$mut_id, muts$Indiv)), N >0)
founds = as.data.table(filter(as.data.table(table(founds$V1)), N ==20)) #8268 unique variants present in everyone, 18902/52302 = 36%
founds_muts = as.data.table(filter(muts, mut_id %in% founds$V1))
#how many unique mutations per patient?
unique = filter(as.data.table(table(muts$mut_id, muts$id)), N >0)
unique_muts = as.data.table(filter(as.data.table(table(unique$V1)), N ==1)) #9133 unique variants present, 14800/52302 = 28%
unique_muts = merge(unique_muts, unique, by = c("V1", "N"))
unique_muts_sum = as.data.table(table(unique_muts$V2)) ;  unique_muts_sum = unique_muts_sum[order(-N)]
print(unique_muts_sum)
ggbarplot(unique_muts_sum, x = "V1", y="N", fill="grey") +theme_bw() +
rotate_x_text(65) + ylab("Number of unique SNVs") + xlab("Sample")
ggsave(paste(date, "num_unique_muts_per_samples_final.pdf", sep="_"))
#where are they?
unique_muts = (as.data.table(filter(muts, mut_id %in% unique_muts$V1)))
unique_muts = unique(unique_muts[,c("mut_id", "Func.ensGene", "Gene.ensGene", "GeneDetail.ensGene", "ExonicFunc.ensGene", "AAChange.ensGene", "cosmic68", "hg19.ensemblToGeneName.value")])
genes = as.data.table(table(unique_muts$hg19.ensemblToGeneName.value))
#Functional of genes
unique_muts_plot = unique(muts[,c("mut_id", "Func.ensGene")])
sum_muts = as.data.table(table(unique_muts_plot$Func.ensGene)) ; sum_muts = sum_muts[order(-N)]
print(sum_muts)
sum_muts$N = sum_muts$N
ggbarplot(sum_muts, x = "V1", y="N", fill="grey") +theme_bw() +
rotate_x_text(65) + ylab("Number of SNVs") + xlab("Gene region")
ggsave(paste(date, "num_muts_per_genomic_region.pdf", sep="_"))
#Functional of exons
sum_muts = as.data.table(table(muts$ExonicFunc.ensGene)) ; sum_muts = sum_muts[order(-N)]
print(sum_muts)
sum_muts$N = sum_muts$N / 1000000
ggbarplot(sum_muts, x = "V1", y="N", fill="grey", label = TRUE) +theme_bw() +
rotate_x_text(65) + ylab("Number of SNVs/ Megabase") + xlab("Gene region")
ggsave(paste(date, "num_muts_per_exonic_region.pdf", sep="_"))
#remove founder and unique variants since they are not informative for this task
muts_matrix = as.data.frame(dcast(muts, mut_id ~ id, value.var = "gt_AF"))
muts_matrix = subset(muts_matrix, !(mut_id %in% founds$mut_id))
muts_matrix = subset(muts_matrix, !(mut_id %in% unique_muts$mut_id))
rownames(muts_matrix) = muts_matrix$mut_id
muts_matrix$mut_id = NULL
#replace all NAs with zeros for now
muts_matrix[is.na(muts_matrix)] = 0
require(vegan)
muts_matrix = t(muts_matrix)
dist.mat<-vegdist(muts_matrix,method="jaccard", na.rm = TRUE)
clust.res<-hclust(dist.mat)
plot(clust.res)
ggsave(paste(date, "hclust_prelim_tree.pdf", sep="_"))
#1. in founds
genes_founds = as.data.table(table(founds$hg19.ensemblToGeneName.value)) ; genes_founds = genes_founds[order(-N)]
#2. in unique
genes_unique = as.data.table(table(unique_muts$hg19.ensemblToGeneName.value)) ; genes_unique = genes_unique[order(-N)]
#3. across the board
genes_all = as.data.table(table(muts$hg19.ensemblToGeneName.value)) ; genes_all = genes_all[order(-N)]
#4. -------------------------------------------------------------------
#just Y-RNAs? what's going on with them?
all_Y_RNA = as.data.table(filter(muts, hg19.ensemblToGeneName.value == "Y_RNA"))
ensgs = as.data.table(table(all_Y_RNA$Gene.ensGene))
ensgs = ensgs[order(-N)]
y_rna_muts = as.data.table(table(all_Y_RNA$mut_id))
y_rna_muts = y_rna_muts[order(-N)]
unique(muts$Indiv)
sample=""LY_RAP_0003_Aut_FzT_01""
sample="LY_RAP_0003_Aut_FzT_01"
sample
samp_dat = as.data.table(filter(muts, Indiv == sample))
dim(samp_dat)
chrs = unique(samp_dat$CHROM)
chrs
samp_dat[1:5,]
unique(samp_dat[,c("ChromKey", "CHROM")])
tail(samp_dat)
options(stringsAsFactors=F)
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table", "plyr",
"ggrepel", "stringr", "maftools", "VariantAnnotation", "ggpubr")
lapply(packages, require, character.only = TRUE)
library(Biobase)
# Convert the row names to entrez ids
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
date = Sys.Date()
setwd("/Users/kisaev/FLOMICS_Anjali/FLOMICS_Anajli/Data")
variant_files = list.files(pattern="VCFs_.rds")
variant_files
variant_files = list.files(pattern=".rds")
variant_files
variant_files = list.files(pattern="_.rds")
variant_files
variant_files = list.files(pattern="_.rds")
#gene annotations
genes = unique(fread("ucsc_table_browser_gene_IDs.txt"))
colnames(genes)[2] = "Gene.ensGene"
summary_vars = function(variants){
#extract name of tool that was used to call variants and whether they are INDELs or SNPs
variants_callers=paste(unlist(strsplit(variants, "_"))[3:5], collapse=" ")
#read in file
var_dat = readRDS(variants)
#remove population variants via snpdb
z = which(str_detect(var_dat$avsnp142, "rs"))
if(!(length(z)==0)){
var_dat = var_dat[-z,]
}
#remove potential population variants with high popluation allele frequencies
var_dat$AF_popmax = as.numeric(unlist(var_dat$AF_popmax))
var_dat = as.data.table(filter(var_dat, ((is.na(AF_popmax) )| AF_popmax < 0.05)))
#get gene names
#ensembl to gene ID
#if multiple genes mapped to variant (usually if in between genes or upstream of genes, or if gene has multiple ENSG ids)
#keep id of first gene
var_dat$Gene.ensGene = sapply(var_dat$Gene.ensGene, function(t){unlist(strsplit(t, '\\x', fixed=TRUE))[1]})
var_dat = merge(var_dat, genes , by = "Gene.ensGene", allow.cartesian=TRUE)
var_dat = as.data.table(filter(var_dat, !(is.na(hg19.ensemblToGeneName.value))))
pdf(paste("/Users/kisaev/FLOMICS_Anjali/FLOMICS_Anajli/Plots/", variants_callers, "plots.pdf", sep="_"), width=15, height=10)
#1. summary of # of muts per patient
freq_pats = as.data.table(table(var_dat$patient))
freq_pats = freq_pats[order(-N)]
print(ggbarplot(freq_pats, x = "V1", y="N", fill="grey") +theme_bw() +
rotate_x_text(65) + ylab("Number of called mutations") + xlab("Patient") + ggtitle(paste(variants_callers, ",n=", dim(freq_pats)[1], "at least 1 mutation")))
#2. summary genes  mutations
freq_genes = as.data.table(filter(as.data.table(table(var_dat$patient, var_dat$hg19.ensemblToGeneName.value)), N >=1))
freq_genes = as.data.table(table(freq_genes$V2))
freq_genes = freq_genes[order(-N)]
print(ggbarplot(freq_genes, x = "V1", y="N", fill="grey") +theme_bw() +
rotate_x_text(65) + ylab("Number of patients with mutation") + xlab("Patient") + ggtitle(paste(variants_callers, ",n=", dim(freq_pats)[1], "at least 1 mutation")))
#2. summary of actual mutations
freq_muts = as.data.table(filter(as.data.table(table(var_dat$patient, var_dat$id)), N >=1))
freq_muts = as.data.table(table(freq_muts$V2))
freq_muts = freq_muts[order(-N)]
print(ggbarplot(freq_muts, x = "V1", y="N", fill="grey") +theme_bw() +
rotate_x_text(90) + ylab("Number of patients with mutation") + xlab("Patient") + ggtitle(paste(variants_callers, ",n=", dim(freq_pats)[1], "at least 1 mutation")))
dev.off()
#finally save final RDS files with either INDELs or SNPs for Anjali to conduct further analysis..
data_type = paste(unlist(strsplit(variants, "_"))[3:5], collapse="_")
saveRDS(var_dat, file=paste(date, data_type, "final_version_for_Anjali.rds", sep="_"))
}
#apply to all
llply(variant_files, summary_vars)
variants
variant_files
variants = variant_files[1]
variants
#extract name of tool that was used to call variants and whether they are INDELs or SNPs
variants_callers=paste(unlist(strsplit(variants, "_"))[3:5], collapse=" ")
variant_callers
variants_callers
#extract name of tool that was used to call variants and whether they are INDELs or SNPs
variants_callers=paste(unlist(strsplit(variants, "_"))[3:5], collapse=" ")
#read in file
var_dat = readRDS(variants)
#remove population variants via snpdb
z = which(str_detect(var_dat$avsnp142, "rs"))
if(!(length(z)==0)){
var_dat = var_dat[-z,]
}
#remove potential population variants with high popluation allele frequencies
var_dat$AF_popmax = as.numeric(unlist(var_dat$AF_popmax))
var_dat = as.data.table(filter(var_dat, ((is.na(AF_popmax) )| AF_popmax < 0.05)))
var_dat
#if multiple genes mapped to variant (usually if in between genes or upstream of genes, or if gene has multiple ENSG ids)
#keep id of first gene
var_dat$Gene.ensGene = sapply(var_dat$Gene.ensGene, function(t){unlist(strsplit(t, '\\x', fixed=TRUE))[1]})
var_dat = merge(var_dat, genes , by = "Gene.ensGene", allow.cartesian=TRUE)
var_dat = as.data.table(filter(var_dat, !(is.na(hg19.ensemblToGeneName.value))))
var_dat
pdf(paste("/Users/kisaev/FLOMICS_Anjali/FLOMICS_Anajli/Plots/", variants_callers, "plots.pdf", sep="_"), width=15, height=10)
#1. summary of # of muts per patient
freq_pats = as.data.table(table(var_dat$patient))
freq_pats = freq_pats[order(-N)]
freq_patst
freq_pats
freq_pats = freq_pats[order(-N)]
print(ggbarplot(freq_pats, x = "V1", y="N", fill="grey") +theme_bw() +
rotate_x_text(65) + ylab("Number of called mutations") + xlab("Patient") + ggtitle(paste(variants_callers, ",n=", dim(freq_pats)[1], "at least 1 mutation")))
#2. summary genes  mutations
freq_genes = as.data.table(filter(as.data.table(table(var_dat$patient, var_dat$hg19.ensemblToGeneName.value)), N >=1))
freq_genes = as.data.table(table(freq_genes$V2))
freq_genes = freq_genes[order(-N)]
print(ggbarplot(freq_genes, x = "V1", y="N", fill="grey") +theme_bw() +
rotate_x_text(65) + ylab("Number of patients with mutation") + xlab("Patient") + ggtitle(paste(variants_callers, ",n=", dim(freq_pats)[1], "at least 1 mutation")))
#2. summary of actual mutations
freq_muts = as.data.table(filter(as.data.table(table(var_dat$patient, var_dat$id)), N >=1))
print(ggbarplot(freq_genes, x = "V1", y="N", fill="grey") +theme_bw() +
rotate_x_text(65) + ylab("Number of patients with mutation") + xlab("Patient") + ggtitle(paste(variants_callers, ",n=", dim(freq_pats)[1], "at least 1 mutation")))
freq_genes
print(ggbarplot(freq_genes, x = "V1", y="N", fill="grey") +theme_bw() +
rotate_x_text(65) + ylab("Number of patients with mutation") + xlab("Patient") + ggtitle(paste(variants_callers, ",n=", dim(freq_pats)[1], "at least 1 mutation")))
ggbarplot(freq_genes, x = "V1", y="N", fill="grey")
x=1:10
plot(x,x)

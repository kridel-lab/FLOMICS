if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("TitanCNA")
library(TitanCNA)
options(stringsAsFactors=F)
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table",
"plyr", "ggpubr",
"ggrepel", "stringr", "maftools", "magrittr", "ggExtra", "cowplot")
lapply(packages, require, character.only = TRUE)
date = Sys.Date()
infile <- system.file("extdata", "test_alleleCounts_chr2.txt",
+ package = "TitanCNA")
infile <- system.file("extdata", "test_alleleCounts_chr2.txt",
package = "TitanCNA")
infile <- system.file("extdata", "test_alleleCounts_chr2.txt",
package = "TitanCNA")
data <- loadAlleleCounts(infile, genomeStyle = "NCBI")
names(data)
head(data)
tumWig <- system.file("extdata", "test_tum_chr2.wig", package = "TitanCNA")
normWig <- system.file("extdata", "test_norm_chr2.wig", package = "TitanCNA")
gc <- system.file("extdata", "gc_chr2.wig", package = "TitanCNA")
map <- system.file("extdata", "map_chr2.wig", package = "TitanCNA")
cnData <- correctReadDepth(tumWig, normWig, gc, map, genomeStyle = "NCBI")
head(cnData)
head(v)
head(tumWig)
tumWig
head(cncnData)
head(cnData)
head(data)
options(stringsAsFactors=F)
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table",
"plyr", "ggpubr",
"ggrepel", "stringr", "maftools", "magrittr", "ggExtra", "cowplot")
lapply(packages, require, character.only = TRUE)
date = Sys.Date()
#figure 2
res = readRDS("Documents/final_candidates_TCGA_PCAWG_results_100CVsofElasticNet_June15.rds")
res
res = as.data.table(filter(res, data=="TCGA"))
canc_conv = readRDS("canc_conv.rds")
colnames(canc_conv)[2] = "cancer"
z=which(res$gene_name == "HOXA-AS4")
res$gene_name[z] = "HOXA10-AS"
#figure 2
res = readRDS("Documents/final_candidates_TCGA_PCAWG_results_100CVsofElasticNet_June15.rds")
res = as.data.table(filter(res, data=="TCGA"))
canc_conv = readRDS("canc_conv.rds")
options(stringsAsFactors=F)
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table",
"plyr", "ggpubr",
"ggrepel", "stringr", "maftools", "magrittr", "ggExtra", "cowplot")
lapply(packages, require, character.only = TRUE)
date = Sys.Date()
#figure 2
res = readRDS("Documents/final_candidates_TCGA_PCAWG_results_100CVsofElasticNet_June15.rds")
res = as.data.table(filter(res, data=="TCGA"))
canc_conv = readRDS("Documents/canc_conv.rds")
colnames(canc_conv)[2] = "cancer"
z=which(res$gene_name == "HOXA-AS4")
res$gene_name[z] = "HOXA10-AS"
res
res = merge(res, canc_conv, by="cancer")
t = as.data.table(table(res$type))
t = t[order(-N)]
res$type = factor(res$type, levels =t$V1)
res = res[order(type, HR)]
res
#need to order genes wtihin cancer type
res$combo = paste(res$gene_name, res$type)
res = res[order(type, HR)]
order = unique(res$gene_name)
res$gene_name = factor(res$gene_name, levels=order)
res
require(devtools)
devtools::install_github("keyuan/ccube")
---
title: "Ccube: Clustering Cancer Cell Fractions"
author: "Ke Yuan"
date: "`r Sys.Date()`"
output:
html_document:
theme: null
css: wch_style.css
toc: true
vignette: >
%\VignetteIndexEntry{Vignette Title}
%\VignetteEngine{knitr::rmarkdown}
\usepackage[utf8]{inputenc}
---
library(ccube)
#> Loading required package: foreach
library(dplyr)
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
#library(doParallel)
options(stringsAsFactors = F)
set.seed(1234)
numSnv <- 500
ccfSet <- c(1, 0.7, 0.3) # true ccf pool
ccfTrue <- sample(ccfSet, numSnv, c(0.5,0.2,0.3), replace = T) # simulate true clusters
purity <- 0.8
cnPoolMaj <- c(1,2,3,4) # a pool of possible major copy numbers
cnPoolMin <- c(0,1,2) # a pool of possible minor copy numbers
cnPoolMajFractions <- c(1/4, 1/4, 1/4, 1/4) # prevalence of possible major copy numbers
cnPoolMinFractions <- c(1/3, 1/3, 1/3) # prevalence of possible minor copy numbers
cnProfile = GenerateCopyNumberProfile(cnPoolMaj, cnPoolMin,
cnPoolMajFractions, cnPoolMinFractions, numSnv)
cnProfile
baseDepth = 40
mydata <- data.frame(mutation_id = paste0("ss","_", seq_len(numSnv)) ,
ccf_true = ccfTrue,
minor_cn = cnProfile[,1],
major_cn = cnProfile[,2],
total_cn = cnProfile[,3],
purity = purity,
normal_cn = 2)
mydata <- dplyr::mutate(rowwise(mydata),
mult_true = sample(seq(1,if (major_cn ==1) { 1 } else {major_cn}), 1), # simulate multiplicity
vaf_true = cp2ap(ccf_true, purity, normal_cn, total_cn, total_cn, mult_true), # simulate vaf
total_counts = rpois(1, total_cn/2 * baseDepth), # simulate total read counts
var_counts = rbinom(1, total_counts, vaf_true),  # simulate variant read counts
ref_counts = total_counts - var_counts)
head(mydata)
#> Source: local data frame [6 x 12]
View(mydata)
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
results$ssm
ssm = results$ssm
View(ssm)
View(mydata)
mydata$ccf_true = NULL
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
?RunCcubePipeline
mydat
mydata
mydata
View(mydata)
mydata_test = mydata
mydata_test$purity = NULL
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
mydata
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata_test,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
View(mydata_test)
View(mydata_test)
?GetPurity
mydata_test$mult_true= NULL
mydata_test$vaf_true = NULL
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata_test,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
library(devtools)
install_github("hanasusak/cDriver")
library(cDriver)
library(maftools)
var.annovar <- system.file("extdata", "variants.hg19_multianno.txt", package = "maftools")
var.annovar.maf <- annovarToMaf(annovar = var.annovar, Center = 'CSI-NUS', refBuild = 'hg19',
tsbCol = 'Tumor_Sample_Barcode', table = 'ensGene', header = TRUE)
var.annovar <- system.file("extdata", "variants.hg19_multianno.txt", package = "maftools")
var.annovar
var.annovar.maf <- annovarToMaf(annovar = var.annovar, Center = 'CSI-NUS', refBuild = 'hg19',
tsbCol = 'Tumor_Sample_Barcode', table = 'ensGene', header = TRUE)
var.annovar.maf <- annovarToMaf(annovar = var.annovar, Center = 'CSI-NUS', refBuild = 'hg19',
tsbCol = 'Tumor_Sample_Barcode', table = 'ensGene')
devtools::install_github("umccr/rock") # master version
devtools::install_github("umccr/rock") # master version
require(rock)
manta <- system.file("extdata", "HCC2218_manta.vcf", package = "pebbles")
manta
cnvkit <- system.file("extdata", "HCC2218_cnvkit-call.cns", package = "pebbles")
outdir <- "man/figures/perl_circos"
rock::circos_prep(outdir = outdir, manta = manta, cnv = cnvkit)
library(circos)
manta <- system.file("extdata", "HCC2218_manta.vcf", package = "pebbles")
cnvkit <- system.file("extdata", "HCC2218_cnvkit-call.cns", package = "pebbles")
facets <- system.file("extdata", "HCC2218_facets_cncf.tsv", package = "pebbles")
titan <- system.file("extdata", "HCC2218_titan.segs.tsv", package = "pebbles")
purple <- system.file("extdata", "HCC2218_purple.cnv.tsv", package = "pebbles")
truth <- system.file("extdata", "HCC2218_truthset_cnv_bcbio.tsv", package = "pebbles")
manta
cnvkit
sv_manta <- prep_manta_vcf(manta)
cn_facets <- prep_facets_seg(facets)
cn_cnvkit <- prep_cnvkit_seg(cnvkit)
cn_purple <- prep_purple_seg(purple)
cn_truth <- prep_truth_seg(truth)
cn_titan <- prep_titan_seg(titan) # titan needs -1 for this case
cn_titan$cnv$tot_cn <- cn_titan$cnv$tot_cn - 1
cnv_list <- list(truth = cn_truth, cnvkit = cn_cnvkit, facets = cn_facets, purple = cn_purple, titan = cn_titan)
plot_piano(cnv_list = cnv_list)
cn_cnvkit
cnvkit
fread(cnvkit)
library(data.table)
fread(cnvkit)
fread(titan)
fread(manta)
options(stringsAsFactors=F)
setwd("/Users/kisaev/FLOMICS_Anjali/FLOMICS_Anajli/Data")
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table", "plyr",
"ggrepel", "stringr", "maftools", "ggpubr")
lapply(packages, require, character.only = TRUE)
library(gProfileR)
library(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(clusterProfiler)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
library(pheatmap)
date = Sys.Date()
dev.off()
cpm_matrix = fread("2020-01-16_Telescope_ERVs_differentially_ADVANCED_vs_LIMITED.csv")
cpm_matrix = fread("2020-01-16_Telescope_ERVs_differentially_ADVANCED_vs_LIMITED.csv")
sample_info = fread("2020-01-16_TELESCOPE_OUTPUT_WITH_SAMPLE_ANNOTATION.csv")
head(sample_info)
cpm_matrix = as.matrix(cpm_matrix)
head(cpm_matrix)
cpm_matrix = fread("CPM_exprs_matrix_norm_filt_ERVs_FL_109_cases.csv")
cpm_matrix = as.matrix(cpm_matrix)
head(cpm_matrix)
cpm_matrix = fread("CPM_exprs_matrix_norm_filt_ERVs_FL_109_cases.csv")
cpm_matrix$ERV_ids = NULL
sample_info = fread("2020-01-16_TELESCOPE_OUTPUT_WITH_SAMPLE_ANNOTATION.csv")
cpm_matrix = as.matrix(cpm_matrix)
head(cpm_matrix)
cpm_matrix = as.matrix(cpm_matrix)
cpm_matrix = fread("CPM_exprs_matrix_norm_filt_ERVs_FL_109_cases.csv")
head(cpm_matrix)
rownames(cpm_matrix) = cpm_matrix$ERV_ids
cpm_matrix$ERV_ids = NULL
sample_info = fread("2020-01-16_TELESCOPE_OUTPUT_WITH_SAMPLE_ANNOTATION.csv")
cpm_matrix = as.matrix(cpm_matrix)
head(cpm_matrix)
cpm_matrix = fread("CPM_exprs_matrix_norm_filt_ERVs_FL_109_cases.csv")
rownames(cpm_matrix) = cpm_matrix$ERV_ids
cpm_matrix$ERV_ids = NULL
head(cpm_matrix)
?fread
cpm_matrix = fread("CPM_exprs_matrix_norm_filt_ERVs_FL_109_cases.csv", data.table=FALSE)
rownames(cpm_matrix) = cpm_matrix$ERV_ids
cpm_matrix$ERV_ids = NULL
sample_info = fread("2020-01-16_TELESCOPE_OUTPUT_WITH_SAMPLE_ANNOTATION.csv")
cpm_matrix = as.matrix(cpm_matrix)
head(cpm_matrix)
head(sample_info)
sample_info = sample_info[order(match(SAMPLE_ID, colnames(cpm_matrix)))]
cpm_matrix = fread("CPM_exprs_matrix_norm_filt_ERVs_FL_109_cases.csv", data.table=FALSE)
rownames(cpm_matrix) = cpm_matrix$ERV_ids
cpm_matrix$ERV_ids = NULL
sample_info = fread("2020-01-16_TELESCOPE_OUTPUT_WITH_SAMPLE_ANNOTATION.csv")
sample_info = filter(sample_info, SAMPLE_ID %in% colnames(cpm_matrix))
cpm_matrix = fread("CPM_exprs_matrix_norm_filt_ERVs_FL_109_cases.csv", data.table=FALSE)
rownames(cpm_matrix) = cpm_matrix$ERV_ids
cpm_matrix$ERV_ids = NULL
sample_info = fread("2020-01-16_TELESCOPE_OUTPUT_WITH_SAMPLE_ANNOTATION.csv")
sample_info = filter(sample_info, SAMPLE_ID %in% colnames(cpm_matrix))
head(sample_info)
dim(sample_info)
cpm_matrix = as.matrix(cpm_matrix)
sample_info = sample_info[order(match(SAMPLE_ID, colnames(cpm_matrix)))]
cpm_matrix = fread("CPM_exprs_matrix_norm_filt_ERVs_FL_109_cases.csv", data.table=FALSE)
rownames(cpm_matrix) = cpm_matrix$ERV_ids
cpm_matrix$ERV_ids = NULL
sample_info = fread("2020-01-16_TELESCOPE_OUTPUT_WITH_SAMPLE_ANNOTATION.csv")
sample_info = filter(sample_info, SAMPLE_ID %in% colnames(cpm_matrix))
sample_info
cpm_matrix = fread("CPM_exprs_matrix_norm_filt_ERVs_FL_109_cases.csv", data.table=FALSE)
rownames(cpm_matrix) = cpm_matrix$ERV_ids
cpm_matrix$ERV_ids = NULL
sample_info = fread("2020-01-16_TELESCOPE_OUTPUT_WITH_SAMPLE_ANNOTATION.csv")
sample_info = as.data.table(filter(sample_info, SAMPLE_ID %in% colnames(cpm_matrix)))
cpm_matrix = as.matrix(cpm_matrix)
sample_info = sample_info[order(match(SAMPLE_ID, colnames(cpm_matrix)))]
sample_info$Replicate = as.factor(sample_info$Replicate)
my_sample_col <- data.frame(sample = sample_conversion$Histone_Mark)
sample_info
table(sample_info$TYPE, sample_info$STAGE)
sample_info$STAGE = as.factor(sample_info$STAGE)
pheatmap(cpm_matrix)
dim(cpm_matrix)
head(cpm_matrix)
unique(rownames(cpm_matrix))
cpm_matrix = fread("CPM_exprs_matrix_norm_filt_ERVs_FL_109_cases.csv", data.table=FALSE)
rownames(cpm_matrix) = cpm_matrix$ERV_ids
cpm_matrix$ERV_ids = NULL
sample_info = fread("2020-01-16_TELESCOPE_OUTPUT_WITH_SAMPLE_ANNOTATION.csv")
sample_info = as.data.table(filter(sample_info, SAMPLE_ID %in% colnames(cpm_matrix)))
diff_exp = fread("2020-01-16_Telescope_ERVs_differentially_ADVANCED_vs_LIMITED.csv")
head(diff_exp)
z = which(rownames(cpm_matrix) %in% diff_exp$ERV_ID)
cpm_matrix[z,]
diff_exp = fread("2020-01-16_Telescope_ERVs_differentially_ADVANCED_vs_LIMITED.csv")
z = which(rownames(cpm_matrix) %in% diff_exp$ERV_ID)
z
head(diff_exp$ERV_ID)
head(rownames(cpm_matrix))
z = which(rownames(cpm_matrix) %in% diff_exp$transcript)
z
cpm_matrix = cpm_matrix[z,]
cpm_matrix = as.matrix(cpm_matrix)
sample_info = sample_info[order(match(SAMPLE_ID, colnames(cpm_matrix)))]
sample_info$STAGE = as.factor(sample_info$STAGE)
my_sample_col <- data.frame(sample = sample_conversion$Histone_Mark)
sample_info$SAMPLE_ID == colnames(cpm_matrix)
colnames(cpm_matrix)
unique(sample_info$SAMPLE_ID)
unique(sample_info[,c(SAMPLE_ID, "STAGE")])
unique(sample_info[,c(SAMPLE_ID, STAGE)])
unique(sample_info[,c("SAMPLE_ID", "STAGE")])
cpm_matrix = fread("CPM_exprs_matrix_norm_filt_ERVs_FL_109_cases.csv", data.table=FALSE)
rownames(cpm_matrix) = cpm_matrix$ERV_ids
cpm_matrix$ERV_ids = NULL
sample_info = fread("2020-01-16_TELESCOPE_OUTPUT_WITH_SAMPLE_ANNOTATION.csv")
sample_info = as.data.table(filter(sample_info, SAMPLE_ID %in% colnames(cpm_matrix)))
diff_exp = fread("2020-01-16_Telescope_ERVs_differentially_ADVANCED_vs_LIMITED.csv")
z = which(rownames(cpm_matrix) %in% diff_exp$transcript)
cpm_matrix = cpm_matrix[z,]
cpm_matrix = as.matrix(cpm_matrix)
sample_info = unique(sample_info[,c("SAMPLE_ID", "STAGE")])
sample_info = sample_info[order(match(SAMPLE_ID, colnames(cpm_matrix)))]
sample_info$STAGE = as.factor(sample_info$STAGE)
sample_info$SAMPLE_ID == colnames(cpm_matrix)
my_sample_col <- data.frame(sample = sample_conversion$Histone_Mark)
rownames(my_sample_col) = colnames(deeptools_spearman_cor)
my_sample_row <- data.frame(sample = sample_conversion$Histone_Mark)
rownames(my_sample_row) = rownames(deeptools_spearman_cor)
my_sample_col$replicate = sample_conversion$Replicate
head(cpm_matrix)
pheatmap(cpm_matrix)
dim(cpm_matrix)
cpm_matrix
?pheatmap
pheatmap(cpm_matrix, scale="row")
pheatmap(cpm_matrix, scale="column")
pheatmap(cpm_matrix, scale="row")
pheatmap(cpm_matrix, scale="row", kmeans_k=2)
pheatmap(cpm_matrix, kmeans_k=2)
summary(apply(cpm_matrix, 1, sum))
pheatmap(cpm_matrix, scale="row", kmeans_k=2)
my_sample_col <- data.frame(sample = sample_info$STAGE)
rownames(my_sample_col) = colnames(deeptools_spearman_cor)
my_sample_col <- data.frame(sample = sample_info$STAGE)
rownames(my_sample_col) = colnames(cpm_matrix)
my_sample_col
#pdf("Deeptools_bam_files_ChIPseq_correlation.pdf", width=9)
pheatmap(cpm_matrix, annotation_col = my_sample_col, scale = "row", main="Limited vs Advanced ERVs")
#pdf("Deeptools_bam_files_ChIPseq_correlation.pdf", width=9)
pheatmap(cpm_matrix, annotation_col = my_sample_col, scale = "row", main="Limited vs Advanced ERVs", kmeans=2)
heatmap(cpm_matrix)
dim(cpm_matrix)
gene="ERV316A3_12q14.2 "
gene
gene="ERV316A3_12q14.2"
gene
get_exp_values = which(rownames(cpm_matrix) == gene)
get_exp_values
as.data.table(cpm_matrix[1,])
head(cpm_matrix)
as.data.frame(t(cpm_matrix[1,]))
as.data.frame((cpm_matrix[1,]))
get_exp_values = as.data.frame((cpm_matrix[which(rownames(cpm_matrix)==gene),]))
as.data.frame((cpm_matrix[1,]))
get_exp_values = as.data.frame((cpm_matrix[which(rownames(cpm_matrix)==gene),]))
get_exp_values
get_exp_values$sample = rownames(get_exp_values)
diff_exp
diff_exp[order(abs(logFC), FDR)]
diff_exp[order(abs(logFC), -FDR)]
diff_exp[order(-abs(logFC), FDR)]
gene="ERV316A3_2q21.2b"
#test diff expression using boxplot
gene="ERV316A3_2q21.2b"
get_exp_values = as.data.frame((cpm_matrix[which(rownames(cpm_matrix)==gene),]))
get_exp_values$SAMPLE_ID = rownames(get_exp_values)
sample_info
get_exp_values = join(get_exp_values, sample_info)
get_exp_values
head(get_exp_values)
get_exp_values = as.data.frame((cpm_matrix[which(rownames(cpm_matrix)==gene),]))
get_exp_values$SAMPLE_ID = rownames(get_exp_values)
get_exp_values = join(get_exp_values, sample_info)
colnames(get_exp_values)[1] = "gene_exp"
get_exp_values$gene_exp = log1p(get_exp_values$gene_exp)
ggboxplot(get_exp_values, x="STAGE", y="gene_exp")
#pdf("Deeptools_bam_files_ChIPseq_correlation.pdf", width=9)
cpm_matrix = log1p(cpm_matrix)
pheatmap(cpm_matrix, annotation_col = my_sample_col, scale = "row", main="Limited vs Advanced ERVs", kmeans=2)
pheatmap(cpm_matrix, annotation_col = my_sample_col, scale = "row", main="Limited vs Advanced ERVs")
dim(cpm_matrix)
ggboxplot(get_exp_values, x="STAGE", y="gene_exp")
ggboxplot(get_exp_values, x="STAGE", y="gene_exp") + stat_n_text()
library(EnvStats)
ggboxplot(get_exp_values, x="STAGE", y="gene_exp") + stat_n_text()
ggboxplot(get_exp_values, x="STAGE", y="gene_exp") + stat_n_text() + ylab("log1p(CPM)")
get_plot = function(gene){
get_exp_values = as.data.frame((cpm_matrix[which(rownames(cpm_matrix)==gene),]))
get_exp_values$SAMPLE_ID = rownames(get_exp_values)
get_exp_values = join(get_exp_values, sample_info)
colnames(get_exp_values)[1] = "gene_exp"
get_exp_values$gene_exp = log1p(get_exp_values$gene_exp)
g = ggboxplot(get_exp_values, x="STAGE", y="gene_exp") + stat_n_text() + ylab("log1p(CPM)")
print(g)
}
pdf("testing_diff_exp_genes_boxplots.pdf")
llply(unique(rownames(cpm_matrix), get_plot)
)
unique(rownames(cpm_matrix)
)
dev.ofF()
dev.off()
dev.off()
pdf("testing_diff_exp_genes_boxplots.pdf")
llply(unique(rownames(cpm_matrix)), get_plot)
dev.off()
g = ggboxplot(get_exp_values, x="STAGE", y="gene_exp") + stat_n_text() + ylab("log1p(CPM)") + stat_compare_means()
g
get_plot = function(gene){
get_exp_values = as.data.frame((cpm_matrix[which(rownames(cpm_matrix)==gene),]))
get_exp_values$SAMPLE_ID = rownames(get_exp_values)
get_exp_values = join(get_exp_values, sample_info)
colnames(get_exp_values)[1] = "gene_exp"
get_exp_values$gene_exp = log1p(get_exp_values$gene_exp)
g = ggboxplot(get_exp_values, x="STAGE", y="gene_exp") + stat_n_text() + ylab("log1p(CPM)") + stat_compare_means()
print(g)
}
pdf("testing_diff_exp_genes_boxplots.pdf")
llply(unique(rownames(cpm_matrix)), get_plot)
dev.off()
dev.off()
g = ggboxplot(get_exp_values, x="STAGE", y="gene_exp") + stat_n_text() + ylab("log1p(CPM)") + stat_compare_means() + ggtitle(gene)
g

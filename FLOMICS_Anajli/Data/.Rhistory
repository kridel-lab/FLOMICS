if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("TitanCNA")
library(TitanCNA)
options(stringsAsFactors=F)
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table",
"plyr", "ggpubr",
"ggrepel", "stringr", "maftools", "magrittr", "ggExtra", "cowplot")
lapply(packages, require, character.only = TRUE)
date = Sys.Date()
infile <- system.file("extdata", "test_alleleCounts_chr2.txt",
+ package = "TitanCNA")
infile <- system.file("extdata", "test_alleleCounts_chr2.txt",
package = "TitanCNA")
infile <- system.file("extdata", "test_alleleCounts_chr2.txt",
package = "TitanCNA")
data <- loadAlleleCounts(infile, genomeStyle = "NCBI")
names(data)
head(data)
tumWig <- system.file("extdata", "test_tum_chr2.wig", package = "TitanCNA")
normWig <- system.file("extdata", "test_norm_chr2.wig", package = "TitanCNA")
gc <- system.file("extdata", "gc_chr2.wig", package = "TitanCNA")
map <- system.file("extdata", "map_chr2.wig", package = "TitanCNA")
cnData <- correctReadDepth(tumWig, normWig, gc, map, genomeStyle = "NCBI")
head(cnData)
head(v)
head(tumWig)
tumWig
head(cncnData)
head(cnData)
head(data)
options(stringsAsFactors=F)
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table",
"plyr", "ggpubr",
"ggrepel", "stringr", "maftools", "magrittr", "ggExtra", "cowplot")
lapply(packages, require, character.only = TRUE)
date = Sys.Date()
#figure 2
res = readRDS("Documents/final_candidates_TCGA_PCAWG_results_100CVsofElasticNet_June15.rds")
res
res = as.data.table(filter(res, data=="TCGA"))
canc_conv = readRDS("canc_conv.rds")
colnames(canc_conv)[2] = "cancer"
z=which(res$gene_name == "HOXA-AS4")
res$gene_name[z] = "HOXA10-AS"
#figure 2
res = readRDS("Documents/final_candidates_TCGA_PCAWG_results_100CVsofElasticNet_June15.rds")
res = as.data.table(filter(res, data=="TCGA"))
canc_conv = readRDS("canc_conv.rds")
options(stringsAsFactors=F)
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table",
"plyr", "ggpubr",
"ggrepel", "stringr", "maftools", "magrittr", "ggExtra", "cowplot")
lapply(packages, require, character.only = TRUE)
date = Sys.Date()
#figure 2
res = readRDS("Documents/final_candidates_TCGA_PCAWG_results_100CVsofElasticNet_June15.rds")
res = as.data.table(filter(res, data=="TCGA"))
canc_conv = readRDS("Documents/canc_conv.rds")
colnames(canc_conv)[2] = "cancer"
z=which(res$gene_name == "HOXA-AS4")
res$gene_name[z] = "HOXA10-AS"
res
res = merge(res, canc_conv, by="cancer")
t = as.data.table(table(res$type))
t = t[order(-N)]
res$type = factor(res$type, levels =t$V1)
res = res[order(type, HR)]
res
#need to order genes wtihin cancer type
res$combo = paste(res$gene_name, res$type)
res = res[order(type, HR)]
order = unique(res$gene_name)
res$gene_name = factor(res$gene_name, levels=order)
res
require(devtools)
devtools::install_github("keyuan/ccube")
---
title: "Ccube: Clustering Cancer Cell Fractions"
author: "Ke Yuan"
date: "`r Sys.Date()`"
output:
html_document:
theme: null
css: wch_style.css
toc: true
vignette: >
%\VignetteIndexEntry{Vignette Title}
%\VignetteEngine{knitr::rmarkdown}
\usepackage[utf8]{inputenc}
---
library(ccube)
#> Loading required package: foreach
library(dplyr)
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
#library(doParallel)
options(stringsAsFactors = F)
set.seed(1234)
numSnv <- 500
ccfSet <- c(1, 0.7, 0.3) # true ccf pool
ccfTrue <- sample(ccfSet, numSnv, c(0.5,0.2,0.3), replace = T) # simulate true clusters
purity <- 0.8
cnPoolMaj <- c(1,2,3,4) # a pool of possible major copy numbers
cnPoolMin <- c(0,1,2) # a pool of possible minor copy numbers
cnPoolMajFractions <- c(1/4, 1/4, 1/4, 1/4) # prevalence of possible major copy numbers
cnPoolMinFractions <- c(1/3, 1/3, 1/3) # prevalence of possible minor copy numbers
cnProfile = GenerateCopyNumberProfile(cnPoolMaj, cnPoolMin,
cnPoolMajFractions, cnPoolMinFractions, numSnv)
cnProfile
baseDepth = 40
mydata <- data.frame(mutation_id = paste0("ss","_", seq_len(numSnv)) ,
ccf_true = ccfTrue,
minor_cn = cnProfile[,1],
major_cn = cnProfile[,2],
total_cn = cnProfile[,3],
purity = purity,
normal_cn = 2)
mydata <- dplyr::mutate(rowwise(mydata),
mult_true = sample(seq(1,if (major_cn ==1) { 1 } else {major_cn}), 1), # simulate multiplicity
vaf_true = cp2ap(ccf_true, purity, normal_cn, total_cn, total_cn, mult_true), # simulate vaf
total_counts = rpois(1, total_cn/2 * baseDepth), # simulate total read counts
var_counts = rbinom(1, total_counts, vaf_true),  # simulate variant read counts
ref_counts = total_counts - var_counts)
head(mydata)
#> Source: local data frame [6 x 12]
View(mydata)
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
results$ssm
ssm = results$ssm
View(ssm)
View(mydata)
mydata$ccf_true = NULL
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
?RunCcubePipeline
mydat
mydata
mydata
View(mydata)
mydata_test = mydata
mydata_test$purity = NULL
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
mydata
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata_test,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
View(mydata_test)
View(mydata_test)
?GetPurity
mydata_test$mult_true= NULL
mydata_test$vaf_true = NULL
numOfClusterPool = 1:6
numOfRepeat = 1
results <- RunCcubePipeline(ssm = mydata_test,
numOfClusterPool = numOfClusterPool,
numOfRepeat = numOfRepeat,
runAnalysis = T,
runQC = T)
library(devtools)
install_github("hanasusak/cDriver")
library(cDriver)
library(maftools)
var.annovar <- system.file("extdata", "variants.hg19_multianno.txt", package = "maftools")
var.annovar.maf <- annovarToMaf(annovar = var.annovar, Center = 'CSI-NUS', refBuild = 'hg19',
tsbCol = 'Tumor_Sample_Barcode', table = 'ensGene', header = TRUE)
var.annovar <- system.file("extdata", "variants.hg19_multianno.txt", package = "maftools")
var.annovar
var.annovar.maf <- annovarToMaf(annovar = var.annovar, Center = 'CSI-NUS', refBuild = 'hg19',
tsbCol = 'Tumor_Sample_Barcode', table = 'ensGene', header = TRUE)
var.annovar.maf <- annovarToMaf(annovar = var.annovar, Center = 'CSI-NUS', refBuild = 'hg19',
tsbCol = 'Tumor_Sample_Barcode', table = 'ensGene')
options(stringsAsFactors=F)
#load libraries
packages <- c("dplyr", "readr", "ggplot2", "vcfR", "tidyr", "mclust", "data.table", "plyr",
"ggrepel", "stringr", "maftools", "VariantAnnotation", "ggpubr")
lapply(packages, require, character.only = TRUE)
library(Biobase)
# Convert the row names to entrez ids
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
date = Sys.Date()
setwd("/Users/kisaev/FLOMICS_Anjali/FLOMICS_Anajli/Data")
variant_files = list.files(pattern="_.rds")
#gene annotations
genes = unique(fread("ucsc_table_browser_gene_IDs.txt"))
colnames(genes)[2] = "Gene.ensGene"
variant_files
variants=variant_files[1]
variants
variants=variant_files[3]
#extract name of tool that was used to call variants and whether they are INDELs or SNPs
variants_callers=paste(unlist(strsplit(variants, "_"))[3:5], collapse=" ")
print(variants_callers)
#read in file
var_dat = readRDS(variants)
#remove population variants via snpdb
var_dat$avsnp142 = as.character(var_dat$avsnp142)
z = which(str_detect(var_dat$avsnp142, "rs"))
z
if(!(length(z)==0)){
var_dat = var_dat[-z,]
}
var_dat
#remove potential population variants with high popluation allele frequencies
var_dat$AF_popmax = as.numeric(as.character(var_dat$AF_popmax))
var_dat = as.data.table(filter(var_dat, ((is.na(AF_popmax) )| AF_popmax < 0.05)))
var_dat
var_dat = as.data.table(filter(var_dat, ((is.na(AF_popmax) )| AF_popmax < 0.005)))
var_dat
#if multiple genes mapped to variant (usually if in between genes or upstream of genes, or if gene has multiple ENSG ids)
#keep id of first gene
var_dat$Gene.ensGene = sapply(var_dat$Gene.ensGene, function(t){unlist(strsplit(t, '\\x', fixed=TRUE))[1]})
var_dat$Gene.ensGene = as.character(var_dat$Gene.ensGene)
var_dat = merge(var_dat, genes , by = "Gene.ensGene", allow.cartesian=TRUE)
var_dat = as.data.table(filter(var_dat, !(is.na(hg19.ensemblToGeneName.value))))
var_dat
table(var_dat$Func.ensGene)
table(as.character(var_dat$Func.ensGene))
var_dat
#check if some mutations are potentially artifacts
#summary of actual mutations
freq_muts = as.data.table(filter(as.data.table(table(var_dat$patient, var_dat$id)), N >=1))
freq_muts = as.data.table(table(freq_muts$V2))
freq_muts = freq_muts[order(-N)]
freq_muts
#check if some mutations are potentially artifacts
#summary of actual mutations
freq_muts = as.data.table(filter(as.data.table(table(var_dat$patient, var_dat$id)), N >=1))
freq_,uts
freq_muts
freq_muts = as.data.table(table(freq_muts$V2))
freq_muts = freq_muts[order(-N)]
freq_muts
View(var_dat)
freq_must
var_data
var_dat
#check if some mutations are potentially artifacts
#summary of actual mutations
freq_muts = as.data.table(filter(as.data.table(table(var_dat$patient, var_dat$id, var_dat$hg19.ensemblToGeneName.value)), N >=1))
freq_muts
freq_muts$combo = paste(freq_muts$V2, freq_muts$V3)
freq_muts = as.data.table(table(freq_muts$combo))
freq_muts
freq_muts = freq_muts[order(-N)]
freq_muts
dim(var_dat)
unique(var_dat$id)
var_dat
var_dat$patient
unique(var_dat$patient)
0.2*131
freq_muts
filter(freq_muts, N > 26)
variant
ls()
variants
31-4
filter(freq_muts, N > 26)
high_freq_muts = filter(freq_muts, N > 26)
high_freq_muts
write.table(high_freq_muts, file="FL_Targeted_Seq_mutations_20_perc_more.txt", quote=F, row.names=F, col.names=F)
